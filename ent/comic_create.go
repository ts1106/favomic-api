// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ts1106/favomic-api/ent/author"
	"github.com/ts1106/favomic-api/ent/comic"
	"github.com/ts1106/favomic-api/ent/episode"
	"github.com/ts1106/favomic-api/ent/magazine"
	"github.com/ts1106/favomic-api/ent/tag"
)

// ComicCreate is the builder for creating a Comic entity.
type ComicCreate struct {
	config
	mutation *ComicMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (cc *ComicCreate) SetTitle(s string) *ComicCreate {
	cc.mutation.SetTitle(s)
	return cc
}

// SetAuthorID sets the "author_id" field.
func (cc *ComicCreate) SetAuthorID(u uuid.UUID) *ComicCreate {
	cc.mutation.SetAuthorID(u)
	return cc
}

// SetMagazineID sets the "magazine_id" field.
func (cc *ComicCreate) SetMagazineID(u uuid.UUID) *ComicCreate {
	cc.mutation.SetMagazineID(u)
	return cc
}

// SetID sets the "id" field.
func (cc *ComicCreate) SetID(u uuid.UUID) *ComicCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ComicCreate) SetNillableID(u *uuid.UUID) *ComicCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetAuthor sets the "author" edge to the Author entity.
func (cc *ComicCreate) SetAuthor(a *Author) *ComicCreate {
	return cc.SetAuthorID(a.ID)
}

// SetMagazine sets the "magazine" edge to the Magazine entity.
func (cc *ComicCreate) SetMagazine(m *Magazine) *ComicCreate {
	return cc.SetMagazineID(m.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cc *ComicCreate) AddTagIDs(ids ...uuid.UUID) *ComicCreate {
	cc.mutation.AddTagIDs(ids...)
	return cc
}

// AddTags adds the "tags" edges to the Tag entity.
func (cc *ComicCreate) AddTags(t ...*Tag) *ComicCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cc.AddTagIDs(ids...)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (cc *ComicCreate) AddEpisodeIDs(ids ...uuid.UUID) *ComicCreate {
	cc.mutation.AddEpisodeIDs(ids...)
	return cc
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (cc *ComicCreate) AddEpisodes(e ...*Episode) *ComicCreate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cc.AddEpisodeIDs(ids...)
}

// Mutation returns the ComicMutation object of the builder.
func (cc *ComicCreate) Mutation() *ComicMutation {
	return cc.mutation
}

// Save creates the Comic in the database.
func (cc *ComicCreate) Save(ctx context.Context) (*Comic, error) {
	var (
		err  error
		node *Comic
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Comic)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ComicMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ComicCreate) SaveX(ctx context.Context) *Comic {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ComicCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ComicCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ComicCreate) defaults() {
	if _, ok := cc.mutation.ID(); !ok {
		v := comic.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ComicCreate) check() error {
	if _, ok := cc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Comic.title"`)}
	}
	if v, ok := cc.mutation.Title(); ok {
		if err := comic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Comic.title": %w`, err)}
		}
	}
	if _, ok := cc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New(`ent: missing required field "Comic.author_id"`)}
	}
	if _, ok := cc.mutation.MagazineID(); !ok {
		return &ValidationError{Name: "magazine_id", err: errors.New(`ent: missing required field "Comic.magazine_id"`)}
	}
	if _, ok := cc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "Comic.author"`)}
	}
	if _, ok := cc.mutation.MagazineID(); !ok {
		return &ValidationError{Name: "magazine", err: errors.New(`ent: missing required edge "Comic.magazine"`)}
	}
	return nil
}

func (cc *ComicCreate) sqlSave(ctx context.Context) (*Comic, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *ComicCreate) createSpec() (*Comic, *sqlgraph.CreateSpec) {
	var (
		_node = &Comic{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: comic.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: comic.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Title(); ok {
		_spec.SetField(comic.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if nodes := cc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.AuthorTable,
			Columns: []string{comic.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MagazineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.MagazineTable,
			Columns: []string{comic.MagazineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: magazine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MagazineID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comic.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ComicUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (cc *ComicCreate) OnConflict(opts ...sql.ConflictOption) *ComicUpsertOne {
	cc.conflict = opts
	return &ComicUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ComicCreate) OnConflictColumns(columns ...string) *ComicUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ComicUpsertOne{
		create: cc,
	}
}

type (
	// ComicUpsertOne is the builder for "upsert"-ing
	//  one Comic node.
	ComicUpsertOne struct {
		create *ComicCreate
	}

	// ComicUpsert is the "OnConflict" setter.
	ComicUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *ComicUpsert) SetTitle(v string) *ComicUpsert {
	u.Set(comic.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ComicUpsert) UpdateTitle() *ComicUpsert {
	u.SetExcluded(comic.FieldTitle)
	return u
}

// SetAuthorID sets the "author_id" field.
func (u *ComicUpsert) SetAuthorID(v uuid.UUID) *ComicUpsert {
	u.Set(comic.FieldAuthorID, v)
	return u
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ComicUpsert) UpdateAuthorID() *ComicUpsert {
	u.SetExcluded(comic.FieldAuthorID)
	return u
}

// SetMagazineID sets the "magazine_id" field.
func (u *ComicUpsert) SetMagazineID(v uuid.UUID) *ComicUpsert {
	u.Set(comic.FieldMagazineID, v)
	return u
}

// UpdateMagazineID sets the "magazine_id" field to the value that was provided on create.
func (u *ComicUpsert) UpdateMagazineID() *ComicUpsert {
	u.SetExcluded(comic.FieldMagazineID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Comic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ComicUpsertOne) UpdateNewValues() *ComicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(comic.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comic.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ComicUpsertOne) Ignore() *ComicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ComicUpsertOne) DoNothing() *ComicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ComicCreate.OnConflict
// documentation for more info.
func (u *ComicUpsertOne) Update(set func(*ComicUpsert)) *ComicUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ComicUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *ComicUpsertOne) SetTitle(v string) *ComicUpsertOne {
	return u.Update(func(s *ComicUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ComicUpsertOne) UpdateTitle() *ComicUpsertOne {
	return u.Update(func(s *ComicUpsert) {
		s.UpdateTitle()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *ComicUpsertOne) SetAuthorID(v uuid.UUID) *ComicUpsertOne {
	return u.Update(func(s *ComicUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ComicUpsertOne) UpdateAuthorID() *ComicUpsertOne {
	return u.Update(func(s *ComicUpsert) {
		s.UpdateAuthorID()
	})
}

// SetMagazineID sets the "magazine_id" field.
func (u *ComicUpsertOne) SetMagazineID(v uuid.UUID) *ComicUpsertOne {
	return u.Update(func(s *ComicUpsert) {
		s.SetMagazineID(v)
	})
}

// UpdateMagazineID sets the "magazine_id" field to the value that was provided on create.
func (u *ComicUpsertOne) UpdateMagazineID() *ComicUpsertOne {
	return u.Update(func(s *ComicUpsert) {
		s.UpdateMagazineID()
	})
}

// Exec executes the query.
func (u *ComicUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ComicCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ComicUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ComicUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ComicUpsertOne.ID is not supported by MySQL driver. Use ComicUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ComicUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ComicCreateBulk is the builder for creating many Comic entities in bulk.
type ComicCreateBulk struct {
	config
	builders []*ComicCreate
	conflict []sql.ConflictOption
}

// Save creates the Comic entities in the database.
func (ccb *ComicCreateBulk) Save(ctx context.Context) ([]*Comic, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Comic, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComicMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ComicCreateBulk) SaveX(ctx context.Context) []*Comic {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ComicCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ComicCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Comic.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ComicUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ccb *ComicCreateBulk) OnConflict(opts ...sql.ConflictOption) *ComicUpsertBulk {
	ccb.conflict = opts
	return &ComicUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Comic.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ComicCreateBulk) OnConflictColumns(columns ...string) *ComicUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ComicUpsertBulk{
		create: ccb,
	}
}

// ComicUpsertBulk is the builder for "upsert"-ing
// a bulk of Comic nodes.
type ComicUpsertBulk struct {
	create *ComicCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Comic.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(comic.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ComicUpsertBulk) UpdateNewValues() *ComicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(comic.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Comic.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ComicUpsertBulk) Ignore() *ComicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ComicUpsertBulk) DoNothing() *ComicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ComicCreateBulk.OnConflict
// documentation for more info.
func (u *ComicUpsertBulk) Update(set func(*ComicUpsert)) *ComicUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ComicUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *ComicUpsertBulk) SetTitle(v string) *ComicUpsertBulk {
	return u.Update(func(s *ComicUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *ComicUpsertBulk) UpdateTitle() *ComicUpsertBulk {
	return u.Update(func(s *ComicUpsert) {
		s.UpdateTitle()
	})
}

// SetAuthorID sets the "author_id" field.
func (u *ComicUpsertBulk) SetAuthorID(v uuid.UUID) *ComicUpsertBulk {
	return u.Update(func(s *ComicUpsert) {
		s.SetAuthorID(v)
	})
}

// UpdateAuthorID sets the "author_id" field to the value that was provided on create.
func (u *ComicUpsertBulk) UpdateAuthorID() *ComicUpsertBulk {
	return u.Update(func(s *ComicUpsert) {
		s.UpdateAuthorID()
	})
}

// SetMagazineID sets the "magazine_id" field.
func (u *ComicUpsertBulk) SetMagazineID(v uuid.UUID) *ComicUpsertBulk {
	return u.Update(func(s *ComicUpsert) {
		s.SetMagazineID(v)
	})
}

// UpdateMagazineID sets the "magazine_id" field to the value that was provided on create.
func (u *ComicUpsertBulk) UpdateMagazineID() *ComicUpsertBulk {
	return u.Update(func(s *ComicUpsert) {
		s.UpdateMagazineID()
	})
}

// Exec executes the query.
func (u *ComicUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ComicCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ComicCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ComicUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
