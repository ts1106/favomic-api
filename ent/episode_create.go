// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ts1106/favomic-api/ent/comic"
	"github.com/ts1106/favomic-api/ent/episode"
)

// EpisodeCreate is the builder for creating a Episode entity.
type EpisodeCreate struct {
	config
	mutation *EpisodeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (ec *EpisodeCreate) SetTitle(s string) *EpisodeCreate {
	ec.mutation.SetTitle(s)
	return ec
}

// SetURL sets the "url" field.
func (ec *EpisodeCreate) SetURL(s string) *EpisodeCreate {
	ec.mutation.SetURL(s)
	return ec
}

// SetThumbnail sets the "Thumbnail" field.
func (ec *EpisodeCreate) SetThumbnail(s string) *EpisodeCreate {
	ec.mutation.SetThumbnail(s)
	return ec
}

// SetUpdatedAt sets the "updated_at" field.
func (ec *EpisodeCreate) SetUpdatedAt(t time.Time) *EpisodeCreate {
	ec.mutation.SetUpdatedAt(t)
	return ec
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ec *EpisodeCreate) SetNillableUpdatedAt(t *time.Time) *EpisodeCreate {
	if t != nil {
		ec.SetUpdatedAt(*t)
	}
	return ec
}

// SetComicID sets the "comic_id" field.
func (ec *EpisodeCreate) SetComicID(u uuid.UUID) *EpisodeCreate {
	ec.mutation.SetComicID(u)
	return ec
}

// SetID sets the "id" field.
func (ec *EpisodeCreate) SetID(u uuid.UUID) *EpisodeCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EpisodeCreate) SetNillableID(u *uuid.UUID) *EpisodeCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetComic sets the "comic" edge to the Comic entity.
func (ec *EpisodeCreate) SetComic(c *Comic) *EpisodeCreate {
	return ec.SetComicID(c.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (ec *EpisodeCreate) Mutation() *EpisodeMutation {
	return ec.mutation
}

// Save creates the Episode in the database.
func (ec *EpisodeCreate) Save(ctx context.Context) (*Episode, error) {
	var (
		err  error
		node *Episode
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpisodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Episode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EpisodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EpisodeCreate) SaveX(ctx context.Context) *Episode {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EpisodeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EpisodeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EpisodeCreate) defaults() {
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		v := episode.DefaultUpdatedAt()
		ec.mutation.SetUpdatedAt(v)
	}
	if _, ok := ec.mutation.ID(); !ok {
		v := episode.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EpisodeCreate) check() error {
	if _, ok := ec.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Episode.title"`)}
	}
	if v, ok := ec.mutation.Title(); ok {
		if err := episode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Episode.title": %w`, err)}
		}
	}
	if _, ok := ec.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Episode.url"`)}
	}
	if v, ok := ec.mutation.URL(); ok {
		if err := episode.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Episode.url": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Thumbnail(); !ok {
		return &ValidationError{Name: "Thumbnail", err: errors.New(`ent: missing required field "Episode.Thumbnail"`)}
	}
	if v, ok := ec.mutation.Thumbnail(); ok {
		if err := episode.ThumbnailValidator(v); err != nil {
			return &ValidationError{Name: "Thumbnail", err: fmt.Errorf(`ent: validator failed for field "Episode.Thumbnail": %w`, err)}
		}
	}
	if _, ok := ec.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Episode.updated_at"`)}
	}
	if _, ok := ec.mutation.ComicID(); !ok {
		return &ValidationError{Name: "comic_id", err: errors.New(`ent: missing required field "Episode.comic_id"`)}
	}
	if _, ok := ec.mutation.ComicID(); !ok {
		return &ValidationError{Name: "comic", err: errors.New(`ent: missing required edge "Episode.comic"`)}
	}
	return nil
}

func (ec *EpisodeCreate) sqlSave(ctx context.Context) (*Episode, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (ec *EpisodeCreate) createSpec() (*Episode, *sqlgraph.CreateSpec) {
	var (
		_node = &Episode{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: episode.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: episode.FieldID,
			},
		}
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.Title(); ok {
		_spec.SetField(episode.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ec.mutation.URL(); ok {
		_spec.SetField(episode.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ec.mutation.Thumbnail(); ok {
		_spec.SetField(episode.FieldThumbnail, field.TypeString, value)
		_node.Thumbnail = value
	}
	if value, ok := ec.mutation.UpdatedAt(); ok {
		_spec.SetField(episode.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ec.mutation.ComicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.ComicTable,
			Columns: []string{episode.ComicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ComicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Episode.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EpisodeUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ec *EpisodeCreate) OnConflict(opts ...sql.ConflictOption) *EpisodeUpsertOne {
	ec.conflict = opts
	return &EpisodeUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Episode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EpisodeCreate) OnConflictColumns(columns ...string) *EpisodeUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EpisodeUpsertOne{
		create: ec,
	}
}

type (
	// EpisodeUpsertOne is the builder for "upsert"-ing
	//  one Episode node.
	EpisodeUpsertOne struct {
		create *EpisodeCreate
	}

	// EpisodeUpsert is the "OnConflict" setter.
	EpisodeUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *EpisodeUpsert) SetTitle(v string) *EpisodeUpsert {
	u.Set(episode.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EpisodeUpsert) UpdateTitle() *EpisodeUpsert {
	u.SetExcluded(episode.FieldTitle)
	return u
}

// SetURL sets the "url" field.
func (u *EpisodeUpsert) SetURL(v string) *EpisodeUpsert {
	u.Set(episode.FieldURL, v)
	return u
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *EpisodeUpsert) UpdateURL() *EpisodeUpsert {
	u.SetExcluded(episode.FieldURL)
	return u
}

// SetThumbnail sets the "Thumbnail" field.
func (u *EpisodeUpsert) SetThumbnail(v string) *EpisodeUpsert {
	u.Set(episode.FieldThumbnail, v)
	return u
}

// UpdateThumbnail sets the "Thumbnail" field to the value that was provided on create.
func (u *EpisodeUpsert) UpdateThumbnail() *EpisodeUpsert {
	u.SetExcluded(episode.FieldThumbnail)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EpisodeUpsert) SetUpdatedAt(v time.Time) *EpisodeUpsert {
	u.Set(episode.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EpisodeUpsert) UpdateUpdatedAt() *EpisodeUpsert {
	u.SetExcluded(episode.FieldUpdatedAt)
	return u
}

// SetComicID sets the "comic_id" field.
func (u *EpisodeUpsert) SetComicID(v uuid.UUID) *EpisodeUpsert {
	u.Set(episode.FieldComicID, v)
	return u
}

// UpdateComicID sets the "comic_id" field to the value that was provided on create.
func (u *EpisodeUpsert) UpdateComicID() *EpisodeUpsert {
	u.SetExcluded(episode.FieldComicID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Episode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(episode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EpisodeUpsertOne) UpdateNewValues() *EpisodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(episode.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Episode.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EpisodeUpsertOne) Ignore() *EpisodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EpisodeUpsertOne) DoNothing() *EpisodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EpisodeCreate.OnConflict
// documentation for more info.
func (u *EpisodeUpsertOne) Update(set func(*EpisodeUpsert)) *EpisodeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EpisodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *EpisodeUpsertOne) SetTitle(v string) *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EpisodeUpsertOne) UpdateTitle() *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateTitle()
	})
}

// SetURL sets the "url" field.
func (u *EpisodeUpsertOne) SetURL(v string) *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *EpisodeUpsertOne) UpdateURL() *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateURL()
	})
}

// SetThumbnail sets the "Thumbnail" field.
func (u *EpisodeUpsertOne) SetThumbnail(v string) *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "Thumbnail" field to the value that was provided on create.
func (u *EpisodeUpsertOne) UpdateThumbnail() *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateThumbnail()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EpisodeUpsertOne) SetUpdatedAt(v time.Time) *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EpisodeUpsertOne) UpdateUpdatedAt() *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetComicID sets the "comic_id" field.
func (u *EpisodeUpsertOne) SetComicID(v uuid.UUID) *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetComicID(v)
	})
}

// UpdateComicID sets the "comic_id" field to the value that was provided on create.
func (u *EpisodeUpsertOne) UpdateComicID() *EpisodeUpsertOne {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateComicID()
	})
}

// Exec executes the query.
func (u *EpisodeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EpisodeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EpisodeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EpisodeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EpisodeUpsertOne.ID is not supported by MySQL driver. Use EpisodeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EpisodeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EpisodeCreateBulk is the builder for creating many Episode entities in bulk.
type EpisodeCreateBulk struct {
	config
	builders []*EpisodeCreate
	conflict []sql.ConflictOption
}

// Save creates the Episode entities in the database.
func (ecb *EpisodeCreateBulk) Save(ctx context.Context) ([]*Episode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Episode, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EpisodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EpisodeCreateBulk) SaveX(ctx context.Context) []*Episode {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EpisodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EpisodeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Episode.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EpisodeUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ecb *EpisodeCreateBulk) OnConflict(opts ...sql.ConflictOption) *EpisodeUpsertBulk {
	ecb.conflict = opts
	return &EpisodeUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Episode.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EpisodeCreateBulk) OnConflictColumns(columns ...string) *EpisodeUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EpisodeUpsertBulk{
		create: ecb,
	}
}

// EpisodeUpsertBulk is the builder for "upsert"-ing
// a bulk of Episode nodes.
type EpisodeUpsertBulk struct {
	create *EpisodeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Episode.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(episode.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EpisodeUpsertBulk) UpdateNewValues() *EpisodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(episode.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Episode.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EpisodeUpsertBulk) Ignore() *EpisodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EpisodeUpsertBulk) DoNothing() *EpisodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EpisodeCreateBulk.OnConflict
// documentation for more info.
func (u *EpisodeUpsertBulk) Update(set func(*EpisodeUpsert)) *EpisodeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EpisodeUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *EpisodeUpsertBulk) SetTitle(v string) *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *EpisodeUpsertBulk) UpdateTitle() *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateTitle()
	})
}

// SetURL sets the "url" field.
func (u *EpisodeUpsertBulk) SetURL(v string) *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetURL(v)
	})
}

// UpdateURL sets the "url" field to the value that was provided on create.
func (u *EpisodeUpsertBulk) UpdateURL() *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateURL()
	})
}

// SetThumbnail sets the "Thumbnail" field.
func (u *EpisodeUpsertBulk) SetThumbnail(v string) *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetThumbnail(v)
	})
}

// UpdateThumbnail sets the "Thumbnail" field to the value that was provided on create.
func (u *EpisodeUpsertBulk) UpdateThumbnail() *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateThumbnail()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *EpisodeUpsertBulk) SetUpdatedAt(v time.Time) *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *EpisodeUpsertBulk) UpdateUpdatedAt() *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetComicID sets the "comic_id" field.
func (u *EpisodeUpsertBulk) SetComicID(v uuid.UUID) *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.SetComicID(v)
	})
}

// UpdateComicID sets the "comic_id" field to the value that was provided on create.
func (u *EpisodeUpsertBulk) UpdateComicID() *EpisodeUpsertBulk {
	return u.Update(func(s *EpisodeUpsert) {
		s.UpdateComicID()
	})
}

// Exec executes the query.
func (u *EpisodeUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EpisodeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EpisodeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EpisodeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
