// Code generated by ent, DO NOT EDIT.

package comic

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/ts1106/favomic-api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// AuthorID applies equality check predicate on the "author_id" field. It's identical to AuthorIDEQ.
func AuthorID(v uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorID), v))
	})
}

// MagazineID applies equality check predicate on the "magazine_id" field. It's identical to MagazineIDEQ.
func MagazineID(v uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMagazineID), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Comic {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Comic {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// AuthorIDEQ applies the EQ predicate on the "author_id" field.
func AuthorIDEQ(v uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAuthorID), v))
	})
}

// AuthorIDNEQ applies the NEQ predicate on the "author_id" field.
func AuthorIDNEQ(v uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAuthorID), v))
	})
}

// AuthorIDIn applies the In predicate on the "author_id" field.
func AuthorIDIn(vs ...uuid.UUID) predicate.Comic {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAuthorID), v...))
	})
}

// AuthorIDNotIn applies the NotIn predicate on the "author_id" field.
func AuthorIDNotIn(vs ...uuid.UUID) predicate.Comic {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAuthorID), v...))
	})
}

// MagazineIDEQ applies the EQ predicate on the "magazine_id" field.
func MagazineIDEQ(v uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMagazineID), v))
	})
}

// MagazineIDNEQ applies the NEQ predicate on the "magazine_id" field.
func MagazineIDNEQ(v uuid.UUID) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMagazineID), v))
	})
}

// MagazineIDIn applies the In predicate on the "magazine_id" field.
func MagazineIDIn(vs ...uuid.UUID) predicate.Comic {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMagazineID), v...))
	})
}

// MagazineIDNotIn applies the NotIn predicate on the "magazine_id" field.
func MagazineIDNotIn(vs ...uuid.UUID) predicate.Comic {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Comic(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMagazineID), v...))
	})
}

// HasAuthor applies the HasEdge predicate on the "author" edge.
func HasAuthor() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthorWith applies the HasEdge predicate on the "author" edge with a given conditions (other predicates).
func HasAuthorWith(preds ...predicate.Author) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AuthorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMagazine applies the HasEdge predicate on the "magazine" edge.
func HasMagazine() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MagazineTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MagazineTable, MagazineColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMagazineWith applies the HasEdge predicate on the "magazine" edge with a given conditions (other predicates).
func HasMagazineWith(preds ...predicate.Magazine) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MagazineInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, MagazineTable, MagazineColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TagsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEpisodes applies the HasEdge predicate on the "episodes" edge.
func HasEpisodes() predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EpisodesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEpisodesWith applies the HasEdge predicate on the "episodes" edge with a given conditions (other predicates).
func HasEpisodesWith(preds ...predicate.Episode) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EpisodesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EpisodesTable, EpisodesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Comic) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Comic) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Comic) predicate.Comic {
	return predicate.Comic(func(s *sql.Selector) {
		p(s.Not())
	})
}
