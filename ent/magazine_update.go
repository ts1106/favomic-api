// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ts1106/favomic-api/ent/comic"
	"github.com/ts1106/favomic-api/ent/magazine"
	"github.com/ts1106/favomic-api/ent/predicate"
)

// MagazineUpdate is the builder for updating Magazine entities.
type MagazineUpdate struct {
	config
	hooks    []Hook
	mutation *MagazineMutation
}

// Where appends a list predicates to the MagazineUpdate builder.
func (mu *MagazineUpdate) Where(ps ...predicate.Magazine) *MagazineUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetName sets the "name" field.
func (mu *MagazineUpdate) SetName(s string) *MagazineUpdate {
	mu.mutation.SetName(s)
	return mu
}

// AddComicIDs adds the "comics" edge to the Comic entity by IDs.
func (mu *MagazineUpdate) AddComicIDs(ids ...uuid.UUID) *MagazineUpdate {
	mu.mutation.AddComicIDs(ids...)
	return mu
}

// AddComics adds the "comics" edges to the Comic entity.
func (mu *MagazineUpdate) AddComics(c ...*Comic) *MagazineUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddComicIDs(ids...)
}

// Mutation returns the MagazineMutation object of the builder.
func (mu *MagazineUpdate) Mutation() *MagazineMutation {
	return mu.mutation
}

// ClearComics clears all "comics" edges to the Comic entity.
func (mu *MagazineUpdate) ClearComics() *MagazineUpdate {
	mu.mutation.ClearComics()
	return mu
}

// RemoveComicIDs removes the "comics" edge to Comic entities by IDs.
func (mu *MagazineUpdate) RemoveComicIDs(ids ...uuid.UUID) *MagazineUpdate {
	mu.mutation.RemoveComicIDs(ids...)
	return mu
}

// RemoveComics removes "comics" edges to Comic entities.
func (mu *MagazineUpdate) RemoveComics(c ...*Comic) *MagazineUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveComicIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MagazineUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MagazineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			if mu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MagazineUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MagazineUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MagazineUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MagazineUpdate) check() error {
	if v, ok := mu.mutation.Name(); ok {
		if err := magazine.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Magazine.name": %w`, err)}
		}
	}
	return nil
}

func (mu *MagazineUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   magazine.Table,
			Columns: magazine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: magazine.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(magazine.FieldName, field.TypeString, value)
	}
	if mu.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magazine.ComicsTable,
			Columns: []string{magazine.ComicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedComicsIDs(); len(nodes) > 0 && !mu.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magazine.ComicsTable,
			Columns: []string{magazine.ComicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.ComicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magazine.ComicsTable,
			Columns: []string{magazine.ComicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{magazine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// MagazineUpdateOne is the builder for updating a single Magazine entity.
type MagazineUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MagazineMutation
}

// SetName sets the "name" field.
func (muo *MagazineUpdateOne) SetName(s string) *MagazineUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// AddComicIDs adds the "comics" edge to the Comic entity by IDs.
func (muo *MagazineUpdateOne) AddComicIDs(ids ...uuid.UUID) *MagazineUpdateOne {
	muo.mutation.AddComicIDs(ids...)
	return muo
}

// AddComics adds the "comics" edges to the Comic entity.
func (muo *MagazineUpdateOne) AddComics(c ...*Comic) *MagazineUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddComicIDs(ids...)
}

// Mutation returns the MagazineMutation object of the builder.
func (muo *MagazineUpdateOne) Mutation() *MagazineMutation {
	return muo.mutation
}

// ClearComics clears all "comics" edges to the Comic entity.
func (muo *MagazineUpdateOne) ClearComics() *MagazineUpdateOne {
	muo.mutation.ClearComics()
	return muo
}

// RemoveComicIDs removes the "comics" edge to Comic entities by IDs.
func (muo *MagazineUpdateOne) RemoveComicIDs(ids ...uuid.UUID) *MagazineUpdateOne {
	muo.mutation.RemoveComicIDs(ids...)
	return muo
}

// RemoveComics removes "comics" edges to Comic entities.
func (muo *MagazineUpdateOne) RemoveComics(c ...*Comic) *MagazineUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveComicIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MagazineUpdateOne) Select(field string, fields ...string) *MagazineUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Magazine entity.
func (muo *MagazineUpdateOne) Save(ctx context.Context) (*Magazine, error) {
	var (
		err  error
		node *Magazine
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MagazineMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			if muo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = muo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, muo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Magazine)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from MagazineMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MagazineUpdateOne) SaveX(ctx context.Context) *Magazine {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MagazineUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MagazineUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MagazineUpdateOne) check() error {
	if v, ok := muo.mutation.Name(); ok {
		if err := magazine.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Magazine.name": %w`, err)}
		}
	}
	return nil
}

func (muo *MagazineUpdateOne) sqlSave(ctx context.Context) (_node *Magazine, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   magazine.Table,
			Columns: magazine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: magazine.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Magazine.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, magazine.FieldID)
		for _, f := range fields {
			if !magazine.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != magazine.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(magazine.FieldName, field.TypeString, value)
	}
	if muo.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magazine.ComicsTable,
			Columns: []string{magazine.ComicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedComicsIDs(); len(nodes) > 0 && !muo.mutation.ComicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magazine.ComicsTable,
			Columns: []string{magazine.ComicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.ComicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   magazine.ComicsTable,
			Columns: []string{magazine.ComicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: comic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Magazine{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{magazine.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
