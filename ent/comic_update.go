// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ts1106/favomic-api/ent/author"
	"github.com/ts1106/favomic-api/ent/comic"
	"github.com/ts1106/favomic-api/ent/episode"
	"github.com/ts1106/favomic-api/ent/magazine"
	"github.com/ts1106/favomic-api/ent/predicate"
	"github.com/ts1106/favomic-api/ent/tag"
)

// ComicUpdate is the builder for updating Comic entities.
type ComicUpdate struct {
	config
	hooks    []Hook
	mutation *ComicMutation
}

// Where appends a list predicates to the ComicUpdate builder.
func (cu *ComicUpdate) Where(ps ...predicate.Comic) *ComicUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetTitle sets the "title" field.
func (cu *ComicUpdate) SetTitle(s string) *ComicUpdate {
	cu.mutation.SetTitle(s)
	return cu
}

// SetAuthorID sets the "author_id" field.
func (cu *ComicUpdate) SetAuthorID(u uuid.UUID) *ComicUpdate {
	cu.mutation.SetAuthorID(u)
	return cu
}

// SetMagazineID sets the "magazine_id" field.
func (cu *ComicUpdate) SetMagazineID(u uuid.UUID) *ComicUpdate {
	cu.mutation.SetMagazineID(u)
	return cu
}

// SetAuthor sets the "author" edge to the Author entity.
func (cu *ComicUpdate) SetAuthor(a *Author) *ComicUpdate {
	return cu.SetAuthorID(a.ID)
}

// SetMagazine sets the "magazine" edge to the Magazine entity.
func (cu *ComicUpdate) SetMagazine(m *Magazine) *ComicUpdate {
	return cu.SetMagazineID(m.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cu *ComicUpdate) AddTagIDs(ids ...uuid.UUID) *ComicUpdate {
	cu.mutation.AddTagIDs(ids...)
	return cu
}

// AddTags adds the "tags" edges to the Tag entity.
func (cu *ComicUpdate) AddTags(t ...*Tag) *ComicUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.AddTagIDs(ids...)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (cu *ComicUpdate) AddEpisodeIDs(ids ...uuid.UUID) *ComicUpdate {
	cu.mutation.AddEpisodeIDs(ids...)
	return cu
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (cu *ComicUpdate) AddEpisodes(e ...*Episode) *ComicUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.AddEpisodeIDs(ids...)
}

// Mutation returns the ComicMutation object of the builder.
func (cu *ComicUpdate) Mutation() *ComicMutation {
	return cu.mutation
}

// ClearAuthor clears the "author" edge to the Author entity.
func (cu *ComicUpdate) ClearAuthor() *ComicUpdate {
	cu.mutation.ClearAuthor()
	return cu
}

// ClearMagazine clears the "magazine" edge to the Magazine entity.
func (cu *ComicUpdate) ClearMagazine() *ComicUpdate {
	cu.mutation.ClearMagazine()
	return cu
}

// ClearTags clears all "tags" edges to the Tag entity.
func (cu *ComicUpdate) ClearTags() *ComicUpdate {
	cu.mutation.ClearTags()
	return cu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (cu *ComicUpdate) RemoveTagIDs(ids ...uuid.UUID) *ComicUpdate {
	cu.mutation.RemoveTagIDs(ids...)
	return cu
}

// RemoveTags removes "tags" edges to Tag entities.
func (cu *ComicUpdate) RemoveTags(t ...*Tag) *ComicUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cu.RemoveTagIDs(ids...)
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (cu *ComicUpdate) ClearEpisodes() *ComicUpdate {
	cu.mutation.ClearEpisodes()
	return cu
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (cu *ComicUpdate) RemoveEpisodeIDs(ids ...uuid.UUID) *ComicUpdate {
	cu.mutation.RemoveEpisodeIDs(ids...)
	return cu
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (cu *ComicUpdate) RemoveEpisodes(e ...*Episode) *ComicUpdate {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cu.RemoveEpisodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ComicUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ComicUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ComicUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ComicUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ComicUpdate) check() error {
	if v, ok := cu.mutation.Title(); ok {
		if err := comic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Comic.title": %w`, err)}
		}
	}
	if _, ok := cu.mutation.AuthorID(); cu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comic.author"`)
	}
	if _, ok := cu.mutation.MagazineID(); cu.mutation.MagazineCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comic.magazine"`)
	}
	return nil
}

func (cu *ComicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comic.Table,
			Columns: comic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: comic.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Title(); ok {
		_spec.SetField(comic.FieldTitle, field.TypeString, value)
	}
	if cu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.AuthorTable,
			Columns: []string{comic.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.AuthorTable,
			Columns: []string{comic.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MagazineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.MagazineTable,
			Columns: []string{comic.MagazineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: magazine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MagazineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.MagazineTable,
			Columns: []string{comic.MagazineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: magazine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !cu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !cu.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ComicUpdateOne is the builder for updating a single Comic entity.
type ComicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ComicMutation
}

// SetTitle sets the "title" field.
func (cuo *ComicUpdateOne) SetTitle(s string) *ComicUpdateOne {
	cuo.mutation.SetTitle(s)
	return cuo
}

// SetAuthorID sets the "author_id" field.
func (cuo *ComicUpdateOne) SetAuthorID(u uuid.UUID) *ComicUpdateOne {
	cuo.mutation.SetAuthorID(u)
	return cuo
}

// SetMagazineID sets the "magazine_id" field.
func (cuo *ComicUpdateOne) SetMagazineID(u uuid.UUID) *ComicUpdateOne {
	cuo.mutation.SetMagazineID(u)
	return cuo
}

// SetAuthor sets the "author" edge to the Author entity.
func (cuo *ComicUpdateOne) SetAuthor(a *Author) *ComicUpdateOne {
	return cuo.SetAuthorID(a.ID)
}

// SetMagazine sets the "magazine" edge to the Magazine entity.
func (cuo *ComicUpdateOne) SetMagazine(m *Magazine) *ComicUpdateOne {
	return cuo.SetMagazineID(m.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (cuo *ComicUpdateOne) AddTagIDs(ids ...uuid.UUID) *ComicUpdateOne {
	cuo.mutation.AddTagIDs(ids...)
	return cuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (cuo *ComicUpdateOne) AddTags(t ...*Tag) *ComicUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.AddTagIDs(ids...)
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (cuo *ComicUpdateOne) AddEpisodeIDs(ids ...uuid.UUID) *ComicUpdateOne {
	cuo.mutation.AddEpisodeIDs(ids...)
	return cuo
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (cuo *ComicUpdateOne) AddEpisodes(e ...*Episode) *ComicUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.AddEpisodeIDs(ids...)
}

// Mutation returns the ComicMutation object of the builder.
func (cuo *ComicUpdateOne) Mutation() *ComicMutation {
	return cuo.mutation
}

// ClearAuthor clears the "author" edge to the Author entity.
func (cuo *ComicUpdateOne) ClearAuthor() *ComicUpdateOne {
	cuo.mutation.ClearAuthor()
	return cuo
}

// ClearMagazine clears the "magazine" edge to the Magazine entity.
func (cuo *ComicUpdateOne) ClearMagazine() *ComicUpdateOne {
	cuo.mutation.ClearMagazine()
	return cuo
}

// ClearTags clears all "tags" edges to the Tag entity.
func (cuo *ComicUpdateOne) ClearTags() *ComicUpdateOne {
	cuo.mutation.ClearTags()
	return cuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (cuo *ComicUpdateOne) RemoveTagIDs(ids ...uuid.UUID) *ComicUpdateOne {
	cuo.mutation.RemoveTagIDs(ids...)
	return cuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (cuo *ComicUpdateOne) RemoveTags(t ...*Tag) *ComicUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return cuo.RemoveTagIDs(ids...)
}

// ClearEpisodes clears all "episodes" edges to the Episode entity.
func (cuo *ComicUpdateOne) ClearEpisodes() *ComicUpdateOne {
	cuo.mutation.ClearEpisodes()
	return cuo
}

// RemoveEpisodeIDs removes the "episodes" edge to Episode entities by IDs.
func (cuo *ComicUpdateOne) RemoveEpisodeIDs(ids ...uuid.UUID) *ComicUpdateOne {
	cuo.mutation.RemoveEpisodeIDs(ids...)
	return cuo
}

// RemoveEpisodes removes "episodes" edges to Episode entities.
func (cuo *ComicUpdateOne) RemoveEpisodes(e ...*Episode) *ComicUpdateOne {
	ids := make([]uuid.UUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return cuo.RemoveEpisodeIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ComicUpdateOne) Select(field string, fields ...string) *ComicUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Comic entity.
func (cuo *ComicUpdateOne) Save(ctx context.Context) (*Comic, error) {
	var (
		err  error
		node *Comic
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ComicMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Comic)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ComicMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ComicUpdateOne) SaveX(ctx context.Context) *Comic {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ComicUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ComicUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ComicUpdateOne) check() error {
	if v, ok := cuo.mutation.Title(); ok {
		if err := comic.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Comic.title": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.AuthorID(); cuo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comic.author"`)
	}
	if _, ok := cuo.mutation.MagazineID(); cuo.mutation.MagazineCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Comic.magazine"`)
	}
	return nil
}

func (cuo *ComicUpdateOne) sqlSave(ctx context.Context) (_node *Comic, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   comic.Table,
			Columns: comic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: comic.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Comic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, comic.FieldID)
		for _, f := range fields {
			if !comic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != comic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Title(); ok {
		_spec.SetField(comic.FieldTitle, field.TypeString, value)
	}
	if cuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.AuthorTable,
			Columns: []string{comic.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.AuthorTable,
			Columns: []string{comic.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: author.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MagazineCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.MagazineTable,
			Columns: []string{comic.MagazineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: magazine.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MagazineIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   comic.MagazineTable,
			Columns: []string{comic.MagazineColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: magazine.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !cuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   comic.TagsTable,
			Columns: comic.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedEpisodesIDs(); len(nodes) > 0 && !cuo.mutation.EpisodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   comic.EpisodesTable,
			Columns: []string{comic.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: episode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Comic{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{comic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
